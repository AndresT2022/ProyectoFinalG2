mutate(Fecha=as.Date(Fecha)) %>%
as_tsibble(index = Fecha)
bd_1 <- as_tsibble(bd_1, index = Fecha, regular = FALSE)
autoplot(bd_1, P_bolsa)
as_tibble(bd_1)
p_load(tidyverse,
dplyr,
tsibble,
ggplot2,
ggfortify,
tsbox,
forecast)
p_load(prophet,tidyverse,readxl,openxlsx,forecast)
datos  <-  read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
setwd(/Users/ignacioserrano/Documents/Maestria/Big Data/GitHub/ProyectoFinalG2)
setwd("/Users/ignacioserrano/Documents/Maestria/Big Data/GitHub/ProyectoFinalG2")
datos  <-  read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
datosfuturos <-read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja3")
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$Por_Aporte_MH
df$Cat_enso <- datos$Cat_enso
m <- prophet(daily.seasonality=TRUE)
m = add_regressor(m, "P_Henry_Hub")
m = add_regressor(m, "Aporte_MH")
m = add_regressor(m, "Cat_enso")
m <- fit.prophet(m, df)
future <- make_future_dataframe(m, periods = 365, freq="days", include_history = TRUE)
future$P_Henry_Hub  <- datosfuturos$P_Henry_Hub
future$Aporte_MH  <- datosfuturos$Por_Aporte_MH
future$Cat_enso  <- datosfuturos$Cat_enso
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
prophet_plot_components(m, forecast)
plot_forecast_component(m, forecast, 'P_Henry_Hub')
plot_forecast_component(m, forecast, 'Cat_enso')
plot_forecast_component(m, forecast, 'Aporte_MH')
read_xls("Base_Datos_2018_V6")
setwd("/Users/ignacioserrano/Documents/Maestria/Big Data/GitHub/ProyectoFinalG2")
require(pacman)
p_load(tidyverse,
dplyr,
tsibble,
ggplot2,
ggfortify,
tsbox,
forecast)
read_xls("Base_Datos_2018_V6")
read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
bd_1 <- Base_Datos_2018_V6
bd_1 %>%
mutate(Fecha=as.Date(Fecha))
bd_1 <- read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
bd_1 %>%
mutate(Fecha=as.Date(Fecha))
class(bd_1)
autoplot(bd_1, P_bolsa)
ts_data.frame(bd_1)
autoplot(bd_1, P_bolsa)
bd_1 %>%
mutate(Fecha=as.Date(Fecha)) %>%
as_tsibble(index = Fecha)
ts_data.frame(bd_1)
class(bd_1)
autoplot(bd_1, P_bolsa)
ts_trend(bd_1)
ts_index(bd_1, base = 2018-01-01)
ts_trend(bd_1)
ggplot(bd_1, aes(x = Fecha, y = P_bolsa))+
geom_point()
ts_tsibble(bd_1)
class(bd_1)
autoplot(bd_1, P_bolsa)
bd_1 <- ts_tsibble(bd_1)
bd_1 <- ts_tsibble(bd_1)
class(bd_1)
ts_index(bd_1, base = 2018-01-01)
ts_trend(bd_1)
autoplot(bd_1, P_bolsa)
bd_1 <- ts_data.frame(bd_1)
class(bd_1)
bd_1 <- ts_tsibble(bd_1)
filter(bd_1, filter=filter_coefficients, sides=2,
method="convolution",
circular=F)
filter(bd_1, filter==filter_coefficients, sides=2,
method="convolution",
circular=F)
filter(bd_1, filter==filter_coefficients, sides==2,
method="convolution",
circular=F)
filter(bd_1, filter==filter_coefficients, sides==2,
method=="convolution",
circular==F)
ggplot(bd_1, aes(x = Fecha, y = P_bolsa))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)
ggplot2::autoplot(bd_1)
filter(bd_1, filter=filter_coefficients, sides=2,
method="convolution",
circular=F)
bd_2 <- tsibble(bd_1
Fecha,
bd_2 <- tsibble(bd_1,
Fecha,
P_bolsa)
bd_1
ggplot2::autoplot(bd_1)
autoplot(as.ts(bd_1))
autoplot(as.ts(bd_1, P_bolsa))
ts_trend(as.ts(bd_1))
bd_2 <- bd_1 %>% tsibble(index = Fecha,
key = P_bolsa,
)
ts_trend(as.ts(bd_2))
autoplot(as.ts(bd_1, P_bolsa))
autoplot(as.ts(bd_2))
p_load(tidyverse,
dplyr,
tsibble,
ggplot2,
ggfortify,
tsbox,
forecast,
TSA)
autoplot(as.ts(bd_2$P_bolsa))
ts_trend(as.ts(bd_2))
ts_trend(as.ts(bd_2$P_bolsa))
ts_index(bd_1, base = 2018-01-01)
autoplot(as.ts(bd_2))
autoplot(as.ts(bd_2))
autoplot(as.ts(bd_2$Fecha))
ggplot(bd_2, aes(x = Fecha, y = P_bolsa))+
geom_point()
ts_plot(bd_2)
bd_2 %>% ts.plot(x = Fecha, y = P_bolsa)
bd_2 %>% ts.plot(x = date(), y = P_bolsa)
bd_2 %>% ts.plot(x = date(), y = "P_bolsa")
bd_2 %>% ts.plot(x = date(), y = "P_bolsa")
bd_3 <- select(bd_1, "Fecha", "P_bolsa")
View(bd_3)
bd_3 <- bd_1,[c("Fecha", "P_bolsa")]
bd_3 <- bd_1[c("Fecha", "P_bolsa")]
View(bd_3)
glimpse(bd_3)
bd_3
as_tsibble(bd_3)
autoplot(bd_3)
autoplot(as.ts(bd_3))
ts_plot(bd_3)
ts_trend(as.ts(bd_3))
acf(bd_3,
type=‘correlation’,
acf(bd_3,
type=correlation,
na.action=na.pass)
acf(bd_3,
type="correlation",
na.action=na.pass)
filter(bd_3,
filter=filter_coefficients,
sides=2,
method="convolution",
circular=F)
filter(bd_3,
filter==filter_coefficients,
sides=2,
method="convolution",
circular=F)
filter(bd_3,
filter==filter_coefficients,
sides==2,
method="convolution",
circular=F)
filter(bd_3,
filter==filter_coefficients,
sides==2,
method=="convolution",
circular==F)
autoplot(as.ts(bd_3))
ts_plot(bd_3)
ggplot(bd_2, aes(x = Fecha, y = P_bolsa))+
geom_point()
acf(bd_3,
type="correlation",
na.action=na.pass)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx,forecast)
datos  <-  read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
datosfuturos <-read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja3")
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$Por_Aporte_MH
df$Cat_enso <- datos$Cat_enso
#df,daily.seasonality=TRUE
m <- prophet(daily.seasonality=TRUE)
m = add_regressor(m, "P_Henry_Hub")
m = add_regressor(m, "Aporte_MH")
m = add_regressor(m, "Cat_enso")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days", include_history = TRUE)
future$P_Henry_Hub  <- datosfuturos$P_Henry_Hub
future$Aporte_MH  <- datosfuturos$Por_Aporte_MH
future$Cat_enso  <- datosfuturos$Cat_enso
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
prophet_plot_components(m, forecast)
plot_forecast_component(m, forecast, 'P_Henry_Hub')
plot_forecast_component(m, forecast, 'Cat_enso')
plot_forecast_component(m, forecast, 'Aporte_MH')
View(datos)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx,forecast)
datos  <-  read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
datosfuturos <-read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja3")
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$Por_Aporte_MH
df$Cat_enso <- datos$enso
df$gent <- datos$Gen_Term
#df,daily.seasonality=TRUE
m <- prophet(daily.seasonality=TRUE)
m = add_regressor(m, "P_Henry_Hub")
m = add_regressor(m, "Aporte_MH")
m = add_regressor(m, "Cat_enso")
m = add_regressor(m, "gent")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days", include_history = TRUE)
future$P_Henry_Hub  <- datosfuturos$P_Henry_Hub
future$Aporte_MH  <- datosfuturos$Por_Aporte_MH
future$Cat_enso  <- datosfuturos$Cat_enso
future$gent  <- datosfuturos$gent
forecast <- predict(m, future)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx,forecast)
datos  <-  read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
datosfuturos <-read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja3")
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$Por_Aporte_MH
df$Cat_enso <- datos$enso
df$gent <- datos$Gen_Term
#df,daily.seasonality=TRUE
m <- prophet(daily.seasonality=TRUE)
m = add_regressor(m, "P_Henry_Hub")
m = add_regressor(m, "Aporte_MH")
m = add_regressor(m, "Cat_enso")
m = add_regressor(m, "gent")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days", include_history = TRUE)
future$P_Henry_Hub  <- datosfuturos$P_Henry_Hub
future$Aporte_MH  <- datosfuturos$Por_Aporte_MH
future$Cat_enso  <- datosfuturos$Cat_enso
future$gent  <- datosfuturos$Gen_Term
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
prophet_plot_components(m, forecast)
plot_forecast_component(m, forecast, 'P_Henry_Hub')
plot_forecast_component(m, forecast, 'Cat_enso')
plot_forecast_component(m, forecast, 'gent')
plot_forecast_component(m, forecast, 'Aporte_MH')
autoplot(as.ts(bd_3))
setwd("/Users/ignacioserrano/Documents/Maestria/Big Data/GitHub/ProyectoFinalG2")
require(pacman)
p_load(tidyverse,
dplyr,
tsibble,
ggplot2,
ggfortify,
tsbox,
forecast,
TSA)
bd_1 <- read.xlsx("Base_Datos_2018_V6.xlsx",detectDates=T, sheet= "Hoja1")
bd_1 %>%
mutate(Fecha=as.Date(Fecha)) %>%
as_tsibble(index = Fecha)
bd_1 <- ts_tsibble(bd_1)
bd_2 <- bd_1 %>% tsibble(index = Fecha,
key = P_bolsa,
)
ts_index(bd_1, base = 2018-01-01)
bd_3 <- bd_1[c("Fecha", "P_bolsa")]
as_tsibble(bd_3)
#plots----
ts_trend(as.ts(bd_3))
autoplot(as.ts(bd_3))
ts_plot(bd_3)
ggplot(bd_2, aes(x = Fecha, y = P_bolsa))+
geom_point()
#arimax
acf(bd_3,
type="correlation",
na.action=na.pass)
autoplot(as.ts(bd_3))+
labs(y = "Precio de Bolsa", x = "Fecha")
autoplot(as.ts(bd_3))
ts_plot(bd_3)
ts_plot(bd_3)+
labs(y = "Precio de Bolsa", x = "Fecha")
?ts_plot
ts_plot(bd_3, Precio de Bolsa)
ts_plot(bd_3, "Precio de Bolsa")
ts_plot(bd_3, title = "Precio de Bolsa")
ggplot(bd_2, aes(x = Fecha, y = P_bolsa))+
geom_point()
ggplot(bd_2, aes(x = Fecha, y = P_bolsa))+
geom_abline()
ggplot(bd_2, aes(x = Fecha, y = P_bolsa))+
geom_line()
acf(bd_3,
type="correlation",
na.action=na.pass)
ggplot(bd_3, aes(x = Fecha, y = P_bolsa))+
geom_line()
View(bd_3)
acf(bd_3,
type="correlation",
na.action=na.pass)
acf(bd_3,
type="partial",
na.action=na.pass)
is.na(bd_3)
table(is.na(bd_3))
acf(bd_3,
type="correlation",
na.action=na.pass)
ts_scale(bd_3)
bd_4 <- ts_scale(bd_3)
acf(bd_4,
type="correlation",
na.action=na.pass)
library(forecast)
d.arima <- auto.arima(bd_3)
bd_5 <- bd_1[c("P_bolsa")]
bd_5 <- as_tsibble(bd_5)
bd_5 <- as_tsibble(bd_5, index = "date")
d.arima <- auto.arima(bd_5)
d.forecast <- forecast(d.arima, level = c(95), h = 50)
autoplot(d.forecast)
autoplot(as.ts(bd_3))
as_tsibble(bd_3)
stats::filter(bd_3,
filter=filter_coefficients,
sides=2,
method="convolution",
circular=F)
stats::filter(bd_3,
filter="filter_coefficients",
sides=2,
method="convolution",
circular=F)
stats::filter(bd_3,
filter='filter_coefficients',
sides=2,
method="convolution",
circular=F)
stats::filter(bd_5,
filter='filter_coefficients',
sides=2,
method="convolution",
circular=F)
stats::filter(bd_2,
filter='filter_coefficients',
sides=2,
method="convolution",
circular=F)
stats::filter(as:ts(bd_2),
filter='filter_coefficients',
sides=2,
method="convolution",
circular=F)
rm(list=ls()) ## Limpiar el entorno de trabajo
#setwd("D:/Documents/Andres/ANDES/2.5/ProyectoFinalG2")
setwd("/Users/ignacioserrano/Documents/Maestria/Big Data/GitHub/ProyectoFinalG2")
#1.  Librerias----
#install.packages("lubridate")
require(pacman)
p_load(tidyverse, # manipular/limpiar conjuntos de datos
readxl,    # carga datos de excel
lubridate,  # para fechas
tseries,
astsa,
forecast,
foreign,
quantmod
)
#2.  Descargar datos de mi pc ----
## Informacion desde 1-ene-2018 hasta 30--jun-2022
#Precios bolsa energía eléctrica
Pbol_2018 <- read_excel("Precio_Bolsa_Nacional_($kwh)_2018.xlsx")
Pbol_2019 <- read_excel("Precio_Bolsa_Nacional_($kwh)_2019.xlsx")
Pbol_2020 <- read_excel("Precio_Bolsa_Nacional_($kwh)_2020.xlsx")
Pbol_2021 <- read_excel("Precio_Bolsa_Nacional_($kwh)_2021.xlsx")
Pbol_2022 <- read_excel("Precio_Bolsa_Nacional_($kwh)_2022.xlsx")
#3.  Unir bases de datos ----
#Precios bolsa energía eléctrica
Pbol <- rbind(Pbol_2018,Pbol_2019,Pbol_2020,Pbol_2021,Pbol_2022)
#4.  Limpieza variables ----
#Precios bolsa energía eléctrica
Pbol$Pbol_prom <- rowMeans(Pbol[,2:25])
Pbol <- Pbol[-2:-26]
#5.  Exporta base de datos con variables ----
write.csv(Pbol,file = "Pbol.csv",row.names = F)
#6.  Importa bases de datos consolidados ----
Pbol <- read_csv("Pbol.csv")
#7.  Modelo ARIMA ----
dates <- Pbol$Fecha
Pbol_2 <- Pbol
Pbol_2 <- Pbol_2[-1]
Arimar.ts <- ts(Pbol_2,
start = c(2018,1,1),
frequency = 365)
Arimar.ts
print(Arimar.ts)
class(Arimar.ts)
start(Arimar.ts)
end(Arimar.ts)
plot(Arimar.ts,  main="Serie de tiempo", ylab="Precio", col="navy")
seriedif=diff(Arimar.ts)
plot(seriedif)
#Prueba de D.F.
adf.test(seriedif,alternative = "stationary")
# con p-value de 0.01, se comprueba que hay estacionalidad
#comprobar autocorrelacion
acf(ts(seriedif, frequency=1))
pacf(ts(seriedif, frequency=1))
auto.arima(Arimar.ts, trace = TRUE)
#7.1 Modelo Arima 1 ----
## 1 autoregresivo, 1 diferencia, 1 media movil
modelo1 <- arima(Arimar.ts,order=c(0,1,0))
summary(modelo1)
Pbol <- rbind(Pbol_2018,Pbol_2019,Pbol_2020,Pbol_2021,Pbol_2022)
#4.  Limpieza variables ----
#Precios bolsa energía eléctrica
Pbol$Pbol_prom <- rowMeans(Pbol[,2:25])
Pbol <- Pbol[-2:-26]
#5.  Exporta base de datos con variables ----
write.csv(Pbol,file = "Pbol.csv",row.names = F)
#6.  Importa bases de datos consolidados ----
Pbol <- read_csv("Pbol.csv")
#7.  Modelo ARIMA ----
dates <- Pbol$Fecha
Pbol_2 <- Pbol
Pbol_2 <- Pbol_2[-1]
## Create a time series object
Arimar.ts <- ts(Pbol_2,
start = c(2018,1,1),
frequency = 365)
Arimar.ts
#Escoger modelo
auto.arima(Arimar.ts, trace = TRUE)
print(Arimar.ts)
class(Arimar.ts)
start(Arimar.ts)
end(Arimar.ts)
plot(Arimar.ts,  main="Serie de tiempo", ylab="Precio", col="navy")
#Requiere comprobar estacionalidad
#Prueba de estacionalidad con una diferencia
seriedif=diff(Arimar.ts)
plot(seriedif)
#Prueba de D.F.
adf.test(seriedif,alternative = "stationary")
# con p-value de 0.01, se comprueba que hay estacionalidad
#comprobar autocorrelacion
acf(ts(seriedif, frequency=1))
pacf(ts(seriedif, frequency=1))
#7.1 Modelo Arima 1 ----
## 1 autoregresivo, 1 diferencia, 1 media movil
modelo1 <- arima(Arimar.ts,order=c(0,1,0))
summary(modelo1)
Box.test(residuals(modelo1),type="Ljung-Box")
error=residuals(modelo1)
plot(error, main="Error modelo 1", col="navy")
filter(Arimar.ts, filter=filter_coefficients, sides=2,
method="convolution", circular=F)
dplyr::filter(Arimar.ts, filter=filter_coefficients, sides=2,
method="convolution", circular=F)
library(dplyr)
dplyr::filter(Arimar.ts, filter=filter_coefficients, sides=2,
method="convolution", circular=F)
stats::filter(Arimar.ts, filter=filter_coefficients, sides=2,
method="convolution", circular=F)
