m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
g <- cross_validation(
m,
30,
"months",
period = 15,
initial = 40,
cutoffs = NULL
)
cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
plot_cross_validation_metric(cvresultados, metric, rolling_window = 0.1)
future <- make_future_dataframe(m, periods = 12, freq="month")
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
g <- cross_validation(
m,
12,
"months",
period = 15,
initial = 40,
cutoffs = NULL
)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df)
m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
#g <- cross_validation(
#                m,
#                12,
#                "months",
#                period = 15,
#                initial = 40,
#               cutoffs = NULL
#             )
cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
plot_cross_validation_metric(cvresultados, metric, rolling_window = 0.1)
future <- make_future_dataframe(m, periods = 365, freq="days")
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df)
m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
#g <- cross_validation(
#                m,
#                12,
#                "months",
#                period = 15,
#                initial = 40,
#               cutoffs = NULL
#             )
cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
plot_cross_validation_metric(cvresultados, metric, rolling_window = 0.1)
future <- make_future_dataframe(m, periods = 365, freq="days")
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df)
m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
#g <- cross_validation(
#                m,
#                12,
#                "months",
#                period = 15,
#                initial = 40,
#               cutoffs = NULL
#             )
#cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
#plot_cross_validation_metric(cvresultados, metric, rolling_window = 0.1)
future <- make_future_dataframe(m, periods = 365, freq="days")
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
#g <- cross_validation(
#                m,
#                12,
#                "months",
#                period = 15,
#                initial = 40,
#               cutoffs = NULL
#             )
#cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
#plot_cross_validation_metric(cvresultados, metric, rolling_window = 0.1)
future <- make_future_dataframe(m, periods = 365, freq="days")
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
#g <- cross_validation(
#                m,
#                12,
#                "months",
#                period = 15,
#                initial = 40,
#               cutoffs = NULL
#             )
#cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
#plot_cross_validation_metric(cvresultados, metric, rolling_window = 0.1)
future <- make_future_dataframe(m, periods = 365, freq="days")
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
View(df)
modelo_final <- add_regressor(m, 'P_Henry_Hub')
View(m)
modelo_final <- add_regressor(m, df$P_Henry_Hub)
View(df)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
g <- cross_validation(
m,
12,
"months",
period = 15,
initial = 40,
cutoffs = NULL
)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
g <- cross_validation(
m,
12,
"days",
period = 15,
initial = 40,
cutoffs = NULL
)
cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
plot_cross_validation_metric(cvresultados, metric, rolling_window = 0.1)
View(cvresultados)
plot_cross_validation_metric(cvresultados, mse, rolling_window = 0.1)
?plot_cross_validation_metric
plot_cross_validation_metric(cvresultados, "mse", rolling_window = 0.1)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
df  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)  %>% rename("ds" = "Fecha","y"="P_bolsa")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#modelo_final <- add_regressor(m, "P_Henry_Hub", prior.scale = NULL, standardize = "auto", mode = NULL)
g <- cross_validation(
m,
12,
"days",
period = 15,
initial = 40,
cutoffs = NULL
)
cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
plot_cross_validation_metric(cvresultados, "mse", rolling_window = 0.1)
plot_cross_validation_metric(cvresultados, "mse")
plot_cross_validation_metric(cvresultados, "mse")
?diagnostics.cross_validation.
?fbprophet.diagnostics.cross_validation
?cross_validation
?diagnostics.cross_validation
??diagnostics.cross_validation
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df %>% datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
m <- prophet(df,daily.seasonality=TRUE)
m <- fit.prophet(m, df)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
View(datos)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub")
m <- fit.prophet(m, df,daily.seasonality=TRUE)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub")
m <- fit.prophet(m, df)
View(m)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days")
future$P_Henry_Hub = m.P_Henry_Hub
View(future)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days")
#future$P_Henry_Hub = m.P_Henry_Hub
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days")
future$P_Henry_Hub = m$extra_regressors
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days")
future$P_Henry_Hub = lapply(m$extra_regressors, as.numeric)
View(future)
lista <- m$extra_regressors
View(lista)
future$P_Henry_Hub  <- df$P_Henry_Hub
View(future)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days")
future$P_Henry_Hub  <- df$P_Henry_Hub
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
View(datos)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$"Aporte/MH"
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$"Aporte/MH"
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub","Aporte_MH")
m <- fit.prophet(m, df)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$"Aporte/MH"
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub")
m = add_regressor(m, "Aporte_MH")
View(df)
m <- fit.prophet(m, df)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$"Aporte/MH"
#df,daily.seasonality=TRUE
m <- prophet()
m = add_regressor(m, "P_Henry_Hub")
m = add_regressor(m, "Aporte_MH")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days")
future$P_Henry_Hub  <- df$P_Henry_Hub
future$Aporte_MH  <- df$Aporte_MH
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$"Aporte/MH"
#df,daily.seasonality=TRUE
m <- prophet(daily.seasonality=TRUE)
m = add_regressor(m, "P_Henry_Hub")
m = add_regressor(m, "Aporte_MH")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days")
future$P_Henry_Hub  <- df$P_Henry_Hub
future$Aporte_MH  <- df$Aporte_MH
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
g <- cross_validation(
m,
12,
"days",
period = 15,
initial = 40,
cutoffs = NULL
)
cvresultados <- performance_metrics(g, metrics = NULL, rolling_window = 0.1)
plot_cross_validation_metric(cvresultados, "mse")
#Proyecto final
#Script Consolidacion de datos y limpieza
rm(list=ls()) ## Limpiar el entorno de trabajo
#1. Librerias----
require(pacman)
p_load(prophet,tidyverse,readxl,openxlsx)
datos  <-  read.xlsx("Base_Datos_2018_Alejandro.xlsx",detectDates=T)
df<- datos %>% rename("ds" = "Fecha","y"="P_bolsa") %>% select("ds","y")
df$P_Henry_Hub <- datos$P_Henry_Hub
df$Aporte_MH <- datos$"Aporte/MH"
#df,daily.seasonality=TRUE
m <- prophet(yearly.seasonality=TRUE)
m = add_regressor(m, "P_Henry_Hub")
m = add_regressor(m, "Aporte_MH")
m <- fit.prophet(m, df)
## Future Dataframe
future <- make_future_dataframe(m, periods = 365, freq="days")
future$P_Henry_Hub  <- df$P_Henry_Hub
future$Aporte_MH  <- df$Aporte_MH
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# Print predictions
cat("\nPredictions:\n")
tail(future)
plot(m, forecast)
